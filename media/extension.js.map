{"version":3,"sources":["file:////Users/miguelramos/Public/workspace/vs-palette/src/extension.ts","file:////Users/miguelramos/Public/workspace/vs-palette/src/localStorageService.ts","file:///external \"vscode\"","file:///webpack/bootstrap","file:///webpack/startup"],"names":[],"mappings":"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","file":"extension.js","sourcesContent":["import * as vscode from 'vscode';\nimport { LocalStorageService } from './localStorageService';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n  const provider = new ColorsViewProvider(context.extensionUri);\n  const storage = new LocalStorageService(context.workspaceState);\n\n\tcontext.subscriptions.push(\n\t\tvscode.window.registerWebviewViewProvider(ColorsViewProvider.viewType, provider));\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('palette.addColor', () => {\n\t\t\tprovider.addColor();\n\t\t}));\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('palette.clearColors', () => {\n\t\t\tprovider.clearColors();\n    }));\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('palette.addGroup', () => {\n\t\t\tprovider.addGroup();\n\t\t}));\n}\n\nclass ColorsViewProvider implements vscode.WebviewViewProvider {\n\n\tpublic static readonly viewType = 'palette.colorsView';\n\n\tprivate _view?: vscode.WebviewView;\n\n\tconstructor(\n\t\tprivate readonly _extensionUri: vscode.Uri,\n\t) { }\n\n\tpublic resolveWebviewView(\n\t\twebviewView: vscode.WebviewView,\n\t\tcontext: vscode.WebviewViewResolveContext,\n\t\t_token: vscode.CancellationToken,\n\t) {\n\t\tthis._view = webviewView;\n\n\t\twebviewView.webview.options = {\n\t\t\t// Allow scripts in the webview\n\t\t\tenableScripts: true,\n\n\t\t\tlocalResourceRoots: [\n\t\t\t\tthis._extensionUri\n\t\t\t]\n    };\n\n\t\twebviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n\t\twebviewView.webview.onDidReceiveMessage(data => {\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'colorSelected':\n\t\t\t\t\t{\n\t\t\t\t\t\tvscode.window.activeTextEditor?.insertSnippet(new vscode.SnippetString(`#${data.value}`));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic addColor() {\n\t\tif (this._view) {\n\t\t\tthis._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n\t\t\tthis._view.webview.postMessage({ type: 'addColor' });\n\t\t}\n\t}\n\n\tpublic clearColors() {\n\t\tif (this._view) {\n\t\t\tthis._view.webview.postMessage({ type: 'clearColors' });\n\t\t}\n  }\n\n\tpublic addGroup() {\n\t\tif (this._view) {\n\t\t\tthis._view.webview.postMessage({ type: 'addGroup' });\n\t\t}\n\t}\n\n\tprivate _getHtmlForWebview(webview: vscode.Webview) {\n\t\t// Get the local path to main script run in the webview, then convert it to a uri we can use in the webview.\n\t\tconst scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'out', 'main.js'));\n\n\t\t// Do the same for the stylesheet.\n\t\tconst styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'reset.css'));\n\t\tconst styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'vscode.css'));\n\t\tconst styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'main.css'));\n\n\t\t// Use a nonce to only allow a specific script to be run.\n\t\tconst nonce = getNonce();\n\n\t\treturn `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n\t\t\t\t-->\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">\n\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleMainUri}\" rel=\"stylesheet\">\n\n\t\t\t\t<title>Palette Colors</title>\n\t\t\t</head>\n      <body>\n        <div id=\"app\"></div>\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t</body>\n\t\t\t</html>`;\n\t}\n}\n\nfunction getNonce() {\n\tlet text = '';\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 32; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n}\n","import { Memento } from \"vscode\";\n\nexport class LocalStorageService {\n\n  constructor(private storage: Memento) {}\n\n  public getValue<T>(key: string): T|null {\n    return this.storage.get<T>(key, null as any);\n  }\n\n  public setValue<T>(key: string, value: T) {\n    this.storage.update(key, value);\n  }\n}\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/extension.ts\");\n"],"sourceRoot":""}